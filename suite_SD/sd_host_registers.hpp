/*
##
##  Trade secret of Advanced Micro Devices, Inc.
##  Copyright 2007, Advanced Micro Devices, Inc., (unpublished)
##
##  All rights reserved.  This notice is intended as a precaution against
##  inadvertent publication and does not imply publication or any waiver
##  of confidentiality.  The year included in the foregoing notice is the
##  year of creation of the work.
##
*/

#ifndef _SD_HOST_REGISTERS_H_
#define _SD_HOST_REGISTERS_H_
#include "sdcard_test.hpp"
#define HOST_END_OF_ARRAY 0xFF
#define ADD_REG(x,y,z) {x,#x,y,z}

typedef struct 
{
uint32_t offset;
uint8_t name[50];
uint32_t mask;
uint32_t clear;
}host_register_test;

host_register_test rw_register[] = {
ADD_REG(HOST_DMA_ADDRESS		,0x00		, 0x00),		  //SYSTEM_ADDR_ARG2_OFFSET 				
ADD_REG(HOST_BLOCK_SIZE 		,0x8000		, 0x00),        //BLOCK_SIZE_OFFSET						
ADD_REG(HOST_BLOCK_COUNT		,0x00		, 0x00),        //BLOCK_COUNT_OFFSET						
ADD_REG(HOST_ARGUMENT			,0x00		, 0x00),        //ARG1_OFFSET								
ADD_REG(HOST_TRANSFER_MODE		,0xFFC8 	, 0x00),        //TRANSFER_MODE_OFFSET					
ADD_REG(HOST_COMMAND			,0xC004 	, 0x00),        //COMMAND_OFFSET				
ADD_REG(HOST_HOST_CONTROL_1		,0x00		, 0x00),        //HOST_CONTROL1_OFFSET					
ADD_REG(HOST_POWER_CONTROL		,0xF0 		, 0x00),        //POWER_CONTROL_OFFSET					
ADD_REG(HOST_BLOCK_GAP_CONTROL	,0xF2		, 0x00),        //BLOCK_GAP_CONTROL_OFFSET				
ADD_REG(HOST_WAKE_UP_CONTROL	,0xF8		, 0x00),        //WAKEUP_CONTROL_OFFSET					
//ADD_REG(HOST_CLOCK_CONTROL		,0x00F8		, 0x00),        //CLOCK_CONTROL_OFFSET	- SD2				
//ADD_REG(HOST_TIMEOUT_CONTROL	,0xF0		, 0x00),        //TIMEOUT_CONTROL_OFFSET				
ADD_REG(HOST_INT_ENABLE			,0xCC00FE00	, 0x00),        //NORMAL_INTERRUPT_STATUS_ENABLE_OFFSET	& ERROR_INTERRUPT_STATUS_ENABLE_OFFSET
ADD_REG(HOST_SIGNAL_ENABLE		,0xCC00FE00 , 0x00),        //NORMAL_INTERRUPT_SIGNAL_ENABLE_OFFSET & ERROR_INTERRUPT_SIGNAL_ENABLE_OFFSET
ADD_REG(HOST_ADMA_ADDRESS		,0x0		, 0x00),		  //ADMA_SYSTEM_ADDRESS_OFFSET
ADD_REG(HOST_HOST_CONTROL_2		,0xBFC0		, 0x8000),		  //HOST CTRL 2
ADD_REG(HOST_HOST_CONTROL_2		,0x3FF0		, 0x00),		  //HOST CTRL 2
//ADD_REG(HOST_SHARED_BUS_CONTROL ,0x8088FFFF ),      //SHARED_BUS_CONTROL_OFFSET				
ADD_REG(HOST_END_OF_ARRAY		,0x00		, 0x00)
};


host_register_test ro_register[] = {
ADD_REG(HOST_RESPONSE_0         , 0x00, 0x00),		//RESPONSE0_OFFSET
ADD_REG(HOST_RESPONSE_1         , 0x00, 0x00),		//RESPONSE1_OFFSET
ADD_REG(HOST_RESPONSE_2         , 0x00, 0x00),		//RESPONSE2_OFFSET
ADD_REG(HOST_RESPONSE_3         , 0x00, 0x00),		//RESPONSE3_OFFSET
ADD_REG(HOST_RESPONSE_4         , 0x00, 0x00),		//RESPONSE4_OFFSET
ADD_REG(HOST_RESPONSE_5         , 0x00, 0x00),		//RESPONSE5_OFFSET
ADD_REG(HOST_RESPONSE_6         , 0x00, 0x00),		//RESPONSE6_OFFSET
ADD_REG(HOST_RESPONSE_7         , 0x00, 0x00),		//RESPONSE7_OFFSET
ADD_REG(HOST_PRESENT_STATE      , 0x00, 0x00),		//PRESENT_STATE_OFFSET
ADD_REG(HOST_INT_STATUS         , 0x00, 0x00),		//NORMAL_INTERRUPT_STATUS_OFFSET & ERROR_INTERRUPT_STATUS_OFFSET
ADD_REG(HOST_ACMD_ERR         	, 0x00, 0x00),			//AUTO_CMD_ERROR_STATUS_OFFSET
ADD_REG(HOST_CAPABILITIES       , 0x00, 0x00),		//CAPABILITIES_OFFSET
ADD_REG(HOST_CAPABILITIES_1     , 0x00, 0x00),	//CAPABILITIES_OFFSET
ADD_REG(HOST_MAX_CURRENT        , 0x00, 0x00),		//MAX_CURRENT_CAPABILITIES_OFFSET
ADD_REG(HOST_SET_ACMD_ERROR     , 0x00, 0x00),	//FORCE_EVENT_AUTO_CMD_OFFSET
ADD_REG(HOST_SET_INT_ERROR      , 0x00, 0x00),		//FORCE_EVENT_ERROR_INTERRUPT_OFFSET
ADD_REG(HOST_ADMA_ERROR         , 0x00, 0x00),		//ADMA_ERROR_STATUS_OFFSET
ADD_REG(HOST_PRESET_INIT		, 0x00, 0x00),
ADD_REG(HOST_PRESET_DEFAILT	    , 0x00, 0x00),
ADD_REG(HOST_PRESET_HIGHSPEED   , 0x00, 0x00),
ADD_REG(HOST_PRESET_SDR12	    , 0x00, 0x00),
ADD_REG(HOST_PRESET_SDR25	    , 0x00, 0x00),
ADD_REG(HOST_PRESET_SDR50	    , 0x00, 0x00),
ADD_REG(HOST_PRESET_SDR104	    , 0x00, 0x00),
ADD_REG(HOST_PRESET_DDR50	    , 0x00, 0x00),
ADD_REG(HOST_SLOT_INT_STATUS    , 0x00, 0x00),	//SLOT_INTERRUPT_STATUS_OFFSET
ADD_REG(HOST_HOST_VERSION       , 0x00, 0x00),		//HOST_CONTROLLER_VERSION
ADD_REG(HOST_END_OF_ARRAY		, 0x00, 0x00)
};

#endif